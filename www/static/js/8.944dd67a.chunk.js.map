{"version":3,"sources":["components/Joyride.js","config/joyride/de.js","config/joyride/en.js","config/joyride sync /^/.*$"],"names":["useStyles","makeStyles","theme","button","marginLeft","spacing","grow","flexGrow","content","margin","lineHeight","closeButton","color","Card","maxWidth","CardTitle","display","padding","flex","CardContent","minWidth","borderTop","palette","divider","borderBottom","CardActions","alignItems","justifyContent","JarvisJoyride","props","useTheme","useState","run","setRun","step","setStep","callback","state","action","index","lifecycle","status","type","spotlightClicks","spotlight","document","querySelector","target","addEventListener","setTimeout","cb","buttons","timeout","EVENTS","STEP_AFTER","TARGET_NOT_FOUND","includes","ACTIONS","PREV","STATUS","FINISHED","SKIPPED","continuous","disableOverlayClose","scrollOffset","stepIndex","steps","styles","options","zIndex","arrowColor","background","paper","tooltipComponent","componentProps","isLastStep","backProps","skipProps","closeProps","primaryProps","tooltipProps","classes","buttonProps","e","primaryAction","onClick","className","dangerouslySetInnerHTML","__html","md","render","i18n","t","root","style","open","variant","title","dividers","buttonBack","primaryButton","secondaryButton","secondaryAction","JoyrideTooltip","setTranslations","language","require","children","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/8.944dd67a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n//import clsx from 'clsx'\r\n\r\nimport Joyride, { ACTIONS, EVENTS, STATUS } from 'react-joyride'\r\n\r\nimport i18n from '../controller/i18n'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport Card from '@material-ui/core/Card'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles((theme) => ({\r\n\tbutton: {\r\n\t\tmarginLeft: theme.spacing()\r\n\t},\r\n\tgrow: {\r\n\t\tflexGrow: 1,\r\n\t},\r\n\tcontent: {\r\n\t\t'& p': {\r\n\t\t\tmargin: '0 0 18px',\r\n\t\t\tlineHeight: '1.42857143',\r\n\t\t}\r\n\t},\r\n\tcloseButton: {\r\n\t\tcolor: '#9e9e9e',\r\n\t\tmargin: theme.spacing(-1),\r\n\t\t//top: theme.spacing(1),\r\n\t\t//right: '8px',\r\n\t\t//position: 'absolute'\r\n\t},\r\n\tCard: {\r\n\t\tmaxWidth: '50%',\r\n\t\tmargin: '0 auto'\r\n\t},\r\n\tCardTitle: {\r\n\t\tdisplay: 'flex',\r\n\t\tmargin: 0,\r\n\t\tpadding: '16px 24px',\r\n\t\tflex: '0 0 auto',\r\n\t},\r\n\tCardContent: {\r\n\t\tminWidth: 350,\r\n\t\tpadding: '16px 24px',\r\n\t\tborderTop: `1px solid ${theme.palette.divider}`,\r\n\t\tborderBottom: `1px solid ${theme.palette.divider}`,\r\n\t},\r\n\tCardActions: {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\tpadding: 8,\r\n\t\tjustifyContent: 'flex-end',\r\n\t\tflex: '0 0 auto',\r\n\t}\r\n}));\r\n\r\n\r\n\r\ni18n.setTranslations(language => require('../config/joyride/' + language));\r\n\r\nexport default function JarvisJoyride(props) {\r\n\tconst theme = useTheme();\r\n\t\r\n\tconst [run,setRun] = useState(props.run || false);\r\n\tconst [step,setStep] = useState(0);\r\n\t\r\n\treturn (\r\n\t\t<Joyride\r\n\t\t\tcallback={state => {\r\n\t\t\t\tconst { step, action, index, lifecycle, status, type } = state;\r\n\t\t\t\t\r\n\t\t\t\t// spotlight\r\n\t\t\t\tif (step.spotlightClicks === true && lifecycle === 'tooltip') {\r\n\t\t\t\t\tconst spotlight = document.querySelector(step.target);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (spotlight) {\r\n\t\t\t\t\t\tspotlight.addEventListener('click', () => {\r\n\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\tstep.cb && step.cb(state);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (step.buttons === false) {\r\n\t\t\t\t\t\t\t\t\tsetStep(index + 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, step.timeout || 250);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// steps\r\n\t\t\t\tif ([EVENTS.STEP_AFTER, EVENTS.TARGET_NOT_FOUND].includes(type)) {\r\n\t\t\t\t\tstep.cb && step.cb(state);\r\n\t\t\t\t\tsetStep(index + (action === ACTIONS.PREV ? -1 : 1));\r\n\t\t\t\t}\r\n\t\t\t\telse if ([STATUS.FINISHED, STATUS.SKIPPED].includes(status)) {\r\n\t\t\t\t\tstep.cb && step.cb(state);\r\n\t\t\t\t\tsetRun(false);\r\n\t\t\t\t}\r\n\t\t\t}}\r\n\t\t\t\r\n\t\t\tcontinuous={true}\r\n\t\t\tdisableOverlayClose={true}\r\n\t\t\trun={run}\r\n\t\t\tscrollOffset={60}\r\n\t\t\tstepIndex={step}\r\n\t\t\tsteps={props.steps}\r\n\t\t\tstyles={{\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tzIndex: 1900,\r\n\t\t\t\t\tarrowColor: theme.palette.background.paper\r\n\t\t\t\t}\r\n\t\t\t}}\r\n\t\t\ttooltipComponent={componentProps => JoyrideTooltip({ ...componentProps, 'setRun': setRun })}\r\n\t\t\t/>\r\n\t);\r\n}\r\n\r\n\r\nconst Markdown = require('markdown-it'),\r\n\t  md = new Markdown();\r\n\r\nconst CardTitle = props => {\r\n\tconst { children } = props;\r\n\tconst classes = useStyles();\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.CardTitle}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst CardContent = props => {\r\n\tconst { children } = props;\r\n\tconst classes = useStyles();\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.CardContent}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst CardActions = props => {\r\n\tconst { children } = props;\r\n\tconst classes = useStyles();\r\n\t\r\n\treturn (\r\n\t\t<div className={classes.CardActions}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction JoyrideTooltip(props) {\r\n\tconst { continuous, index, step, isLastStep, backProps, skipProps, closeProps, primaryProps, tooltipProps } = props;\r\n\tconst classes = useStyles();\r\n\t\r\n\tconst buttonProps = {\r\n\t\t...primaryProps,\r\n\t\t'onClick': e => {\r\n\t\t\tstep.primaryAction && step.primaryAction(props);\r\n\t\t\tprimaryProps.onClick(e);\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst content = typeof step.content === 'string' ? <div className={classes.content} dangerouslySetInnerHTML={{__html: md.render(i18n.t(step.content))}} /> : <div className={classes.content}>{step.content}</div>\r\n\treturn (\r\n\t\t<Card classes={{ root: classes.Card }} {...tooltipProps} style={step.style || {}} open={true}>\r\n\t\t\t<CardTitle>\r\n\t\t\t\t<Typography variant=\"h6\" style={{ margin: 'auto 0' }}>{i18n.t(step.title)}</Typography>\r\n\t\t\t\t\r\n\t\t\t\t<div className={classes.grow} />\r\n\t\t\t\t<IconButton classes={{ root: classes.closeButton }} {...skipProps}>\r\n\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</CardTitle>\r\n\t\t\t<CardContent dividers>\r\n\t\t\t\t{content}\r\n\t\t\t</CardContent>\r\n\t\t\t{step.buttons !== false && <CardActions>\r\n\t\t\t\t{index > 0 && (step.buttonBack !== false && <>\r\n\t\t\t\t<Button className={classes.button} color=\"secondary\" {...backProps}>\r\n\t\t\t\t\t{i18n.t('back')}\r\n\t\t\t\t</Button>\r\n\t\t\t\t<div className={classes.grow} />\r\n\t\t\t\t</>)}\r\n\t\t\t\t\r\n\t\t\t\t{!step.primaryButton && continuous && (\r\n\t\t\t\t<Button className={classes.button} color=\"primary\" variant=\"contained\" {...primaryProps}>\r\n\t\t\t\t\t{i18n.t(isLastStep ? 'close' : 'next')}\r\n\t\t\t\t</Button>\r\n\t\t\t\t)}\r\n\t\t\t\t\r\n\t\t\t\t{!step.primaryButton && !continuous && (\r\n\t\t\t\t<Button className={classes.button} {...closeProps}>\r\n\t\t\t\t\t{i18n.t('close')}\r\n\t\t\t\t</Button>\r\n\t\t\t\t)}\r\n\t\t\t\t\r\n\t\t\t\t{step.secondaryButton && (\r\n\t\t\t\t<Button className={classes.button} color=\"primary\" variant=\"text\" onClick={step.secondaryAction && (() => step.secondaryAction(props))}>\r\n\t\t\t\t\t{i18n.t(step.secondaryButton)}\r\n\t\t\t\t</Button>\r\n\t\t\t\t)}\r\n\t\t\t\t{step.primaryButton && (\r\n\t\t\t\t<Button className={classes.button} color=\"primary\" variant=\"contained\" {...buttonProps}>\r\n\t\t\t\t\t{i18n.t(step.primaryButton)}\r\n\t\t\t\t</Button>\r\n\t\t\t\t)}\r\n\t\t\t</CardActions>}\r\n\t\t</Card>\r\n\t);\r\n}\r\n","export default {\r\n\t// INTRODUCTION_STEPS\r\n\t\"#introduction.title\": \"Willkommen zu jarvis\",\r\n\t\"#introduction.content\": \"jarvis ist eine Material Design Visualisierung, die auf [Material UI](https://material-ui.com/) basiert. jarvis gibt eine Struktur und Module vor, die zur Visualisierung genutzt werden, aber sehr flexibel konfiguriert werden können.\\n\\r\" +\r\n\t\t\"jarvis ist [*responsive*](https://de.wikipedia.org/wiki/Responsive_Webdesign) und passt sich der Größe des Screens an.\\n\\r\" +\r\n\t\t\"Das Layout ist flexibel konfigurierbar. Es können optional (beliebig viele) Tabs verwendet werden. Jeder Tab kann entweder `fullscreen` sein oder beliebig viele `columns` haben, die die einzelnen `modules` in flexibler Reihenfolge beinhalten.\\n\\r\" +\r\n\t\t\"Jedes Modul hat spezielle Konfigurationsmöglichkeiten ([siehe Wiki je Modul](https://github.com/Zefau/ioBroker.jarvis/wiki/de-Modules#liste-der-module)).\",\r\n\t\r\n\t\"#settings.title\": \"Die erste jarvis erstellen\",\r\n\t\"#settings.content\": \"Direkt nach der Installation sieht dein jarvis natürlich noch sehr leer aus. Über das Zahnrad kannst du deine jarvis erstellen.\\n\\nWenn du möchtest, kann eine erste Visualisierung automatisch auf Basis deiner Geräte generiert werden? Diese kann im Nachgang natürlich frei bearbeitet werden.\",\r\n\t\"#settings.buttons.manually\": \"manuell erstellen\",\r\n\t\"#settings.buttons.automatically\": \"automatisch generieren\",\r\n\t\r\n\t\"#jarvis.title\": \"Suche Geräte und erstelle jarvis...\",\r\n\t\r\n\t\r\n\t// DASHBOARD_STEPS\r\n\t\"#TabBar.title\": \"Willkommen zu jarvis\",\r\n\t\"#TabBar.content\": \"jarvis bietet die Möglichkeit beliebig viele Tabs / Registerkarten anzulegen. Jeder Menü-Punkt in der Tabbar hat ein eigenes Icons und einen eigenen Bezeichner. Über die Einstellungen können die Bezeichner bei Bedarf ausgeblendet werden, so dass nur Icons zu sehen sind. Alternativ kann auch je Tab entschieden werden, nur Bezeichner, nur Icon oder beides anzuzeigen.\",\r\n\t\r\n\t\"#TabPanel.title\": \"Beliebig viele Tabs, beliebige viele Spalten - oder Vollbild\",\r\n\t\"#TabPanel.content\": \"Jeder Tab kann in der Hauptansicht beliebig viele Spalten beinhalten. Zu viele Spalten werden natürlich sehr kleinteilig - sind aber möglich. Empfohlen werden daher maximal 4 Spalten.\\n\\nJede Spalte kann beliebig viele Widgets beinhalten, die in beliebiger Reihenfolge darin angeordnet werden können. Die Widgets können zudem jederzeit in eine andere Spalte verschoben werden. Ein Widget kann auch als Vollbild über die gesamte Seite hinweg angezeigt werden (z. B. für eine Karte).\",\r\n\t\r\n\t\"#widget.title\": \"Widgets zeigen deine Inhalte\",\r\n\t\"#widget.content\": \"Die Widgets dienen der Darstellung der Inhalte. Ein Widget kann mittels verschiedener Module unterschiedliche Inhalte darstellen. Möglich sind beispielsweise Wetter (mit dem Weather Modul), Kalender (mit dem Calendar Modul) oder eine Liste deiner Geräte, zwecks Status-Anzeige oder zum Schalten einzelner Datenpunkte (StateList Modul).\",\r\n\t\r\n\t\"#WidgetHeader.title\": \"Widget Titelzeile\",\r\n\t\"#WidgetHeader.content\": \"Jede Widget Titelzeile kann ein eigenes Icon (alle Material Design Icons werden unterstützt, siehe [Liste der Material Design Icons](https://materialdesignicons.com/)) und einen eigenen Bezeichner haben. Die Titelzeile kann bei Bedarf auch ausgeblendet werden.\",\r\n\t\r\n\t\"#WidgetContent.title\": \"Widget Inhalt öffnet die Geräte-Details\",\r\n\t\"#WidgetContent.content\": \"Dieses Widget nutzt das StateList Modul, um die Geräte anzuzeigen inkl. der Möglichkeit einen Datenpunkt auszulösen (z. B. an- bzw. auszuschalten).\\n\\nDie Icons eines jeden Geräts können beliebig - auch in Relation zum Wert des Datenpunkts - angepasst werden (also ein jeweils anderes Icon für ein offenes oder geschlossenes Fenster). Es kann entweder der Wert des Datenpunkts angezeigt werden oder eine Möglichkeit den Datenpunkt zu schalten. Die Möglichkeit zum Schalten umfasst einen Switch, Buttons, Eingabefelder, etc.\\n\\n**Zum Fortfahren bitte das Gerät klicken, um die Geräte-Details öffnen.**\",\r\n\t\r\n\t\"#DeviceStateDetails.title\": \"Die Geräte Detail-Ansicht\",\r\n\t\"#DeviceStateDetails.content\": \"Beim Klick öffnet sich ein Popup mit den Geräte-Details. Die Geräte-Details umfassen alle definierten Datenpunkte des Geräts. Auch hier kann zwischen der Anzeige und dem Schalten des Datenpunkts konfiguriert werden. Bei Bedarf kann das Popup deaktiviert oder einzelne Datenpunkte ausgeblendet werden.\",\r\n\t\r\n\t\r\n\t// CONFIGURATION_STEPS\r\n\t\"#ConfigurationPage.title\": \"Willkommen in der Konfiguration\",\r\n\t\"#ConfigurationPage.content\": \"Die Konfiguration besteht aus drei Teilen:\\n\\n1. Der Geräte-Konfiguration zur Verwaltung deiner Geräte inkl. deren Datenpunkte. Außerdem werden die Geräte-Details (das Popup) über die Geräte-Konfiguration eingestellt.\\n\\n2. In der Layout-Konfiguration werden die Tabs / Registerkarten sowie deren Spalten und Widgets verwaltet. Hier werden die Geräte den Widgets hinzugefügt, um diese darzustellen.\\n\\n3. Über die Einstellungen werden allgemeine Sachverhalte konfiguriert wie z. B. Dark Mode, Seitentitel oder -Icon, etc.\",\r\n\t\r\n\t\"#DeviceList.title\": \"Die Geräte-Konfiguration\",\r\n\t\"#DeviceList.content\": \"Die Übersicht der Geräte-Konfiguration besteht aus zwei Teilen: Der Suche (oben) und der gruppierten Liste von Geräten (unten).\",\r\n\t\r\n\t\"#DeviceListFilter.title\": \"Die Geräte-Gruppierung und -Suche\",\r\n\t\"#DeviceListFilter.content\": \"Die Liste von Geräten kann nach Gewerk (Standardeinstellung) oder Hersteller gruppiert werden.\\n\\nDie Suche ist nicht case-sensitiv und findet bei der Eingabe von `pc` oder `PC` jeweils beides. Ein Platzhalter (`*`) wird nicht unterstützt, jedoch findet die Suche nach `CD` sowohl `ABCDE` als auch `ABCD` oder `CDEF`.\\nDie folgenden Felder werden alle gesamtheitlich durchsucht:\\n- Namen des Geräts (`name`)\\n- ID des Geräts (`id`)\\n- Gewerk des Geräts (`function`)\\n- ID der Datenpunkte des Geräts (`stateId`)\\n- Label der Datenpunkte des Geräts (`stateLabel`)\\n- State sowie Action Trigger der Datenpunkte des Geräts (`state` / `action`)\\n- Hersteller (`manufacturer`)\\n\\nDie Felder können auch dediziert durchsucht werden indem z.B. `-name:PC` oder `-function:Licht` eingegeben wird. Es können auch mehrere dedizierte Felder durchsucht werden, z. B. `-name:PC -function:Licht` (also einfach hintereinander weg schreiben).\",\r\n\t\r\n\t\"#DeviceGroup.title\": \"Die Geräte einer Gruppe\",\r\n\t\"#DeviceGroup.content\": \"Das Öffnen einer Geräte-Gruppe zeigt alle Geräten mit Name, Gewerk, Hersteller und den angelegten Datenpunkten (States). Das Gerät kann kopiert oder bearbeitet werden.\",\r\n\t\r\n\t\"#DeviceAdd.title\": \"Ein Gerät hinzufügen\",\r\n\t\"#DeviceAdd.content\": \"Über den Button Geräte hinzufügen können neue Geräte angelegt werden, insbesondere wenn diese nicht importiert werden konnten oder sehr individuell sind (z. B. eigene Datenpunkte oder spezielle Adapter).\\n\\n**Bitte Button klicken zum Fortfahren.**\",\r\n\t\r\n\t\"#DeviceOverview.title\": \"Die Geräte-Anlage / -Bearbeitung\",\r\n\t\"#DeviceOverview.content\": \"Das Gerät wird zunächst durch einen Namen bezeichnet (z. B. Vitrine oder Licht Vitrine). Ein Label kann genutzt werden, falls die Anzeige in der Visualisierung vom Namen abweicht oder abweichen soll.\\n\\nDas Gewerk dient der Einordnung des Geräts. Je nach Gewerk greifen bestimmte Standard-Werte bezogen auf Icons bzw. der Darstellung von Datenpunkt-Werten (siehe auch [Wiki](https://github.com/Zefau/ioBroker.jarvis/wiki/de-Functions)).\\n\\nDie Option `Popup unterdrücken` verhindern, dass beim Klick auf das Gerät die Geräte-Details geöffnet werden.\",\r\n\t\r\n\t\"#DeviceStateAdd.title\": \"Einen Datenpunkt hinzufügen\",\r\n\t\"#DeviceStateAdd.content\": \"Die Datenpunkte machen das Gerät aus. Sie bestimmen, was angezeigt wird. Der hier vergebene Bezeichner kann frei gewählt werden (es wird Kleinschreibung empfohlen). Dieser dient der Identifizerung des Datenpunkts bei der Konfiguration des Layout und steht repräsentativ für den gesamten Datenpunkt.\",\r\n\t\r\n\t\"#DeviceState.title\": \"Die Datenpunkt Konfiguration (Anzeige und Trigger)\",\r\n\t\"#DeviceState.content\": \"Das Herz des Geräts ist die Konfiguration des Datenpunkts.\\n\\nDie Felder `Datenpunkt (Anzeige)` / `Datenpunkt (Trigger)`: Der ioBroker Datenpunkt, dessen Wert angezeigt werden soll (`Anzeige`) bzw. der ioBroker Datenpunkt, der geschaltet werden soll (`Trigger`). In der Regel dergleiche Datenpunkt. Diese können sich bei Bedarf aber auch unterscheiden, wenn ein anderer Datenpunkt angezeigt als geschaltet werden soll (z. B. bei HomeMatic IP aufgrund verschiedener Kanäle).\",\r\n\t\r\n\t\"#DeviceDisplay.title\": \"Die Datenpunkt Konfiguration (Anzeigevariante)\",\r\n\t\"#DeviceDisplay.content\": \"Das Feld `Anzeigevariante`: In Abhängigkeit des Datenpunkt-Werts kann ein bestimmter Text angezeigt werden, z. B. statt `true` wird `offen` oder statt `false` wird `geschlossen` gezeigt. Dies erfolgt mittels JSON-Eingabe: `{ \\\"true\\\": \\\"offen\\\", \\\"false\\\": \\\"geschlossen\\\" }`\",\r\n\t\r\n\t\"#DeviceJSON.title\": \"Die Datenpunkt Konfiguration (JSON Felder)\",\r\n\t\"#DeviceJSON.content\": \"Die Felder `Datenpunkt Stil` / `Einheit` / `Icon` / `Icon Stil` (alle JSON Felder): Diese Logik (Text bzw. Stil in Abhängigkeit des Datenpunkt-Werts) kann für alle JSON-Felder genutzt werden. So kann z. B. ein unterschiedliches Icon (alle Material Design Icons) für offen / geschlossen genutzt werden: `{ \\\"true\\\": \\\"mdi-window-open-variant\\\", \\\"false\\\": \\\"mdi-window-closed-variant\\\" }`. Weitere [Erläuterungen im Wiki](https://github.com/Zefau/ioBroker.jarvis/wiki/de-Devices#json-eingabefelder).\",\r\n\t\r\n\t\"#DeviceProperties.title\": \"Die Datenpunkt Konfiguration (Eigenschaften)\",\r\n\t\"#DeviceProperties.content\": \"Das Feld `Datenpunkt (Eigenschaften)`: Hiermit können die Standardwerte für die visuellen Komponenten (Body Element `bodyElement` sowie Action Element `actionElement`) überschrieben werden, z. B. mit `min` (Standard `0`) / `max` (Standard `100`) die unteren und oberen möglichen Werte eines Geräts überschrieben werden. Weitere [Erläuterungen im Wiki](https://github.com/Zefau/ioBroker.jarvis/wiki/de-Devices#datenpunkt-eigenschaften).\"\r\n}","export default {\r\n\t// INTRODUCTION_STEPS\r\n\t\"#introduction.title\": \"Welcome to jarvis\",\r\n\t\"#introduction.content\": \"\",\r\n\t\r\n\t\"#settings.title\": \"Die erste jarvis erstellen\",\r\n\t\"#settings.content\": \"Direkt nach der Installation sieht dein jarvis natürlich noch sehr leer aus. Über das Zahnrad kannst du deine jarvis erstellen.\\n\\nWenn du möchtest, kann eine erste Visualisierung automatisch auf Basis deiner Geräte generiert werden? Diese kann im Nachgang natürlich frei bearbeitet werden.\",\r\n\t\"#settings.buttons.manually\": \"manuell erstellen\",\r\n\t\"#settings.buttons.automatically\": \"automatisch generieren\",\r\n\t\r\n\t\"#jarvis.title\": \"Suche Geräte und erstelle jarvis...\",\r\n\t\r\n\t// DASHBOARD_STEPS\r\n\t\"#TabBar.title\": \"\",\r\n\t\"#TabBar.content\": \"\",\r\n\t\r\n\t\"#TabPanel.title\": \"\",\r\n\t\"#TabPanel.content\": \"\",\r\n\t\r\n\t\"#widget.title\": \"\",\r\n\t\"#widget.content\": \"\",\r\n\t\r\n\t\"#WidgetHeader.title\": \"\",\r\n\t\"#WidgetHeader.content\": \"\",\r\n\t\r\n\t\"#WidgetContent.title\": \"\",\r\n\t\"#WidgetContent.content\": \"\",\r\n\t\r\n\t\"#DeviceStateDetails.title\": \"\",\r\n\t\"#DeviceStateDetails.content\": \"\"\r\n}","var map = {\n\t\"./de\": 1392,\n\t\"./de.js\": 1392,\n\t\"./en\": 1393,\n\t\"./en.js\": 1393\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1550;"],"sourceRoot":""}