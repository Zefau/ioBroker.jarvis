{"version":3,"sources":["components/DeviceStateDetails.js"],"names":["DeviceStateDetails","props","useState","device","setDevice","devices","useRef","onClose","useEffect","handleDevice","stateKey","current","states","undefined","state","push","id","Log","_","Object","keys","length","name","events","Events","on","off","open","header","label","maxWidth","fullWidth","noPadding","disableBackdropClick","disableEscapeKeyDown","actions","Button","key","variant","onClick","color","StateList","openDialog","config","isDeviceStateDetails","divider"],"mappings":"+NAYe,SAASA,EAAmBC,GAAQ,IAAD,EAEtBC,mBAAS,MAFa,mBAE1CC,EAF0C,KAEnCC,EAFmC,KAG3CC,EAAUC,iBAAO,IACjBC,EAAU,kBAAMH,EAAU,OAgChC,OA9BAI,qBAAU,WACT,IAAMC,EAAe,SAAAN,GAEpB,IAAK,IAAIO,KADTL,EAAQM,QAAU,GACGR,EAAOS,OAE3B,QAAsCC,IAAlCV,EAAOS,OAAOF,GAAUI,MAA5B,CAIA,IAAMA,EAAQX,EAAOS,OAAOF,GAC5BL,EAAQM,QAAQI,KAAhB,yBACC,SAAYZ,EAAOa,GACnB,gBAAmBN,GAChBI,GAHJ,IAIC,oBAAsB,KAIxBG,UAAIC,EAAE,qBAAsB,CAAE,aAAeC,OAAOC,KAAKf,EAAQM,SAASU,OAAS,sBAAwBlB,EAAOmB,KAAO,IAAKjB,EAAQM,UACtIP,EAAUD,IAILoB,EAAS,IAAIC,UAGnB,OAFAD,EAAOE,GAAG,iBAAkBhB,GAErB,kBAAMc,EAAOG,IAAI,iBAAkBjB,MAExC,IAEEN,EAKJ,kBAAC,UAAD,CACCwB,KAAiB,OAAXxB,EACNI,QAASA,EAETqB,OAAQzB,EAAO0B,OAAS1B,EAAOmB,KAC/BQ,SAAS,KACTC,WAAW,EACXC,WAAS,EAETC,sBAAsB,EACtBC,sBAAsB,EAEtBC,QACC,kBAAC,UAAOC,OAAR,CAAeC,IAAI,eAAeC,QAAQ,OAAOC,QAAShC,EAASiC,MAAM,UAAUX,MAAM,WAI1F,kBAAC,UAAQY,UAAT,CACCC,WAAY,KACZrC,QAASA,EAAQM,QACjBgC,OAAQ,CACPC,sBAAsB,EACtBC,SAAS,MA1BL","file":"static/js/32.729b3cd1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n//import clsx from 'clsx'\r\n\r\nimport Events from '../controller/Events'\r\nimport Log from '../controller/Log'\r\n\r\nimport Dialog from './Dialog'\r\nimport Inputs from './Inputs'\r\n\r\nimport Modules from '../modules'\r\n\r\n\r\nexport default function DeviceStateDetails(props) {\r\n\t\r\n\tconst [device,setDevice] = useState(null);\r\n\tconst devices = useRef([]);\r\n\tconst onClose = () => setDevice(null);\r\n\t\r\n\tuseEffect(() => {\r\n\t\tconst handleDevice = device => {\r\n\t\t\tdevices.current = [];\r\n\t\t\tfor (let stateKey in device.states) {\r\n\t\t\t\t\r\n\t\t\t\tif (device.states[stateKey].state === undefined) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst state = device.states[stateKey];\r\n\t\t\t\tdevices.current.push({\r\n\t\t\t\t\t'deviceId': device.id,\r\n\t\t\t\t\t'primaryStateKey': stateKey,\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\t'deviceStateDetails': true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog._('DeviceStateDetails', [ 'Retrieved ' + Object.keys(devices.current).length + ' states for device ' + device.name + '.', devices.current ]);\r\n\t\t\tsetDevice(device);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tconst events = new Events();\r\n\t\tevents.on('device.details', handleDevice);\r\n\t\t\r\n\t\treturn () => events.off('device.details', handleDevice);\r\n\t\t\r\n\t}, []);\r\n\t\r\n\tif (!device) {\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Dialog\r\n\t\t\topen={device !== null}\r\n\t\t\tonClose={onClose}\r\n\t\t\t\r\n\t\t\theader={device.label || device.name}\r\n\t\t\tmaxWidth='md'\r\n\t\t\tfullWidth={true}\r\n\t\t\tnoPadding\r\n\t\t\t\r\n\t\t\tdisableBackdropClick={false}\r\n\t\t\tdisableEscapeKeyDown={false}\r\n\t\t\t\r\n\t\t\tactions={\r\n\t\t\t\t<Inputs.Button key='action-close' variant=\"text\" onClick={onClose} color=\"primary\" label=\"close\" />\r\n\t\t\t}\r\n\t\t\t>\r\n\t\t\r\n\t\t\t<Modules.StateList\r\n\t\t\t\topenDialog={null}\r\n\t\t\t\tdevices={devices.current}\r\n\t\t\t\tconfig={{\r\n\t\t\t\t\tisDeviceStateDetails: true,\r\n\t\t\t\t\tdivider: true\r\n\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t</Dialog>\r\n\t);\r\n}\r\n"],"sourceRoot":""}