const{BindToClass,hash}=require("./helpers");const{getDayOfYear}=require("date-fns");const schedule=require("node-schedule");const EventEmitter=require("events");const JarvisServerAdapters=require("./jarvis.server.adapters");const JarvisServerBackup=require("./jarvis.server.backup");const JarvisServerCalendars=require("./jarvis.server.calendars");const JarvisServerClient=require("./jarvis.server.client");const JarvisServerCloud=require("./jarvis.server.cloud");const JarvisServerGetter=require("./jarvis.server.getter");const JarvisServerHistory=require("./jarvis.server.history");const JarvisServerInstance=require("./jarvis.server.instance");const JarvisServerNotification=require("./jarvis.server.notifications");const JarvisServerPro=require("./jarvis.server.pro");const JarvisServerSetter=require("./jarvis.server.setter");const JarvisServerStates=require("./jarvis.server.states");class JarvisServer extends EventEmitter{constructor(e,s={}){super();this.adapter=e;this.options=s;this.options.user="system.user.admin";this.clients={};this.clientsMessages={};this.clientsAuthenticated={};this.schedulers={};this.settings={};this.notifications=[];this.subscribedStates={};this.subscribedHistory={};this.subscribedCalendar={};this.subscribedLog={};BindToClass(JarvisServerAdapters,this);BindToClass(JarvisServerBackup,this);BindToClass(JarvisServerCalendars,this);BindToClass(JarvisServerClient,this);BindToClass(JarvisServerCloud,this);BindToClass(JarvisServerGetter,this);BindToClass(JarvisServerHistory,this);BindToClass(JarvisServerInstance,this);BindToClass(JarvisServerNotification,this);BindToClass(JarvisServerPro,this);BindToClass(JarvisServerSetter,this);BindToClass(JarvisServerStates,this)}setSetting(e,s){if(s===undefined){this.settings=e}else{this.settings[e]=s}}init(){this.cache={AdapterInstances:{ts:0,data:{}},AdapterUpdates:{ts:0,data:{}},CloudDevices:{ts:0,data:[]},HistoryDevices:{ts:0,data:{}},ScriptStatuses:{ts:0,data:{}}};this.initBackup();this.getAuthenticatedClients();this.getAdapterUpdates().then(()=>this.getAdapterInstances()).then(()=>this.getHistoryInstances()).catch(e=>e&&this.adapter.log.warn(e.message));this.getScriptStatuses().catch(e=>this.adapter.log.warn(e.message));this.getCloudDevices().catch(e=>this.adapter.log.warn(e.message));this.schedulers.removeOutdatedClients=schedule.scheduleJob("0 3 * * *",()=>this.removeOutdatedClients());this.removeOutdatedClients();this.pro();this.loadSettings();this.loadNotifications();return this}close(){Object.values(this.schedulers).forEach(e=>{e&&e.cancel&&e.cancel()});return this}listen(){const e={};this.on("message",(e,s)=>{const{command:t,messageId:i,params:a}=this.handleClientMessage(s);this.handleClientCommand(e,t,i,a)});let t=[];this.adapter.requireLog(true);this.adapter.on("log",e=>{const s=e.message.indexOf(": ")+2;e.message=e.message.substr(s).indexOf("host")===-1?e.message.substr(e.message.indexOf(") ")+2):e.message;t.unshift(e)});setInterval(()=>{t.length>0&&this.broadcast("Log",{logs:t},this.subscribedLog);t=[]},1e3);this.adapter.subscribeForeignStates("*");this.adapter.on("stateChange",(s,t)=>{if(s.startsWith("jarvis.")&&!s.startsWith(this.adapter.namespace+".")){return}this.handleNotification(s,t);this.handleSettings(s,t);if((s.startsWith("system.adapter.")&&s.endsWith(".alive")||s.endsWith(".info.connection"))&&(t&&t.ts===t.lc)&&!s.startsWith("mqtt.")){this.adapter.log.debug('Trigger refresh of Adapter Instances due to "'+s+'".');e.refreshAdapterInstances&&clearTimeout(e.refreshAdapterInstances);e.refreshAdapterInstances=setTimeout(()=>{this.getAdapterUpdates().then(()=>this.getAdapterInstances())},1e3)}if(s&&["devices","layout","widgets","scripts","css"].some(e=>s==="jarvis."+this.adapter.instance+"."+e)){const i=s.split(".");let e=i.pop();try{const a=JSON.parse(t.val);const r=hash(a[e==="css"?"styles":e]);if(a.version!==undefined&&(!a.signature||a.signature!==r)){this.adapter.log.debug("Recalculate signature for "+e+"...");a.signature=r;this.adapter.setState(s,JSON.stringify(a,null,3),true);if(["devices","layout","widgets"].includes(e)){this.detectDuplicateIds(e,a[e])}return false}}catch(e){this.adapter.log.warn('Warning parsing state "'+s+'": '+e.message+" (see debug-log for details)");this.adapter.log.debug("State: "+JSON.stringify(t))}}if(this.isBackupState(s)&&t&&t.val){this.backup(s,t.val)}if(s&&this.subscribedStates[s]){t=t?{err:null,stateId:s,state:{...t,stateId:s,id:s}}:{err:new Error("State with ID "+s+" is not a valid state ["+JSON.stringify(t)+"] (in stateChange)")};this.broadcast("stateChange",t,this.subscribedStates[s])}if(s&&s.startsWith("javascript.0.scriptEnabled.")&&t&&t.ack===true){e.refreshScripts&&clearTimeout(e.refreshScripts);e.refreshScripts=setTimeout(()=>this.getScriptStatuses(),1e3)}else if(s==="admin.0.info.updatesJson"&&t){try{this.cache.AdapterUpdates={ts:Date.now(),data:JSON.parse(t.val)};this.broadcast("AdapterUpdates",this.cache.AdapterUpdates.data)}catch(e){delete this.cache.AdapterUpdates}}if(s&&s.endsWith(".setTabId")&&t&&t.val&&t.ack!==true){this.adapter.getState(s.replace(".setTabId","")+".id",(e,s)=>{this.send(s.val,"#setTabId",t.val)})}});this.adapter.subscribeForeignObjects("*");this.adapter.on("objectChange",(s,t)=>{if(t&&t.common&&t&&t.common.smartName&&!this.cache.CloudDevices.data.includes(s)){this.cache.CloudDevices.ts=Date.now();this.cache.CloudDevices.data.push(s);this.broadcast("CloudDevices",this.cache.CloudDevices.data)}else if(t&&t.common&&!t.common.smartName&&this.cache.CloudDevices&&this.cache.CloudDevices.data.includes(s)){this.cache.CloudDevices.ts=Date.now();this.cache.CloudDevices.data=this.cache.CloudDevices.data.filter(e=>e!==s);this.broadcast("CloudDevices",this.cache.CloudDevices.data)}const e=t&&t.common&&t.common.custom?Object.keys(t.common.custom):[];if(e.some(e=>this.isHistoryAdapter(e))){this.cache.HistoryDevices.data[s]={};this.cache.HistoryDevices.ts=Date.now();e.forEach(e=>{if(this.isHistoryAdapter(e)){this.cache.HistoryDevices.data[s][e]=t.common.custom[e]}});this.broadcast("HistoryDevices",this.cache.HistoryDevices.data)}else if(e.every(e=>!this.isHistoryAdapter(e))&&this.cache.HistoryDevices&&this.cache.HistoryDevices.data[s]!==undefined){this.cache.HistoryDevices.ts=Date.now();this.cache.HistoryDevices.data[s]={};this.broadcast("HistoryDevices",this.cache.HistoryDevices.data)}});this.schedulers.updater=schedule.scheduleJob("*/1 * * * *",r=>{this.broadcast("#time",Date.now());for(const c in this.subscribedCalendar){const{calendar:n,options:o}=this.subscribedCalendar[c];const e=o.refresh||5;if(!this.subscribedCalendar[c].clients||this.subscribedCalendar[c].clients.length===0){this.adapter.log.debug('Calendar Subscription with key "'+c+'" deleted, because no more clients subscribed.');delete this.subscribedCalendar[c];continue}this.adapter.getState("widgets",(e,s)=>{try{const t=JSON.parse(s.val);const i=t&&t.widgets&&Object.values(t.widgets).some(e=>{if(e.module==="Calendar"&&e.config&&e.config.calendars&&Array.isArray(e.config.calendars)){return e.config.calendars.some(e=>e.url===n.url)}return false});if(!i){this.adapter.log.debug('Calendar Subscription with key "'+c+'" deleted, because calendar not used in layout anymore.');delete this.subscribedCalendar[c]}else if(i&&r.getMinutes()%5===0){this.adapter.log.debug('Refresh Calendar with key "'+c+'"...');const a=e=>this.broadcast("Calendar",e,this.subscribedCalendar[c].clients);this.getCalendar({cb:a},c,n,o)}}catch(e){}})}for(const c in this.subscribedHistory){const{stateId:s,options:o}=this.subscribedHistory[c];if(!this.subscribedHistory[c].clients||this.subscribedHistory[c].clients.length===0){this.adapter.log.debug('History Subscription of state "'+s+'" deleted, because no more clients subscribed (using options '+JSON.stringify(o)+").");delete this.subscribedHistory[c];continue}let e=false;if(o.timeRefresh){const t=Math.floor(o.timeRefresh/(24*60));const i=Math.floor(o.timeRefresh%(24*60)/60);const a=o.timeRefresh%60;e=(t===0||t&&getDayOfYear(r)%t===0)&&(i===0||i&&r.getHours()%i===0)&&(a===0||a&&r.getMinutes()%a===0)}else if(o.timeType==="review"&&(o.timeReviewUnit==="seconds"||o.timeReviewUnit==="minutes")){e=true}else if(o.timeType==="review"&&o.timeReviewUnit==="hours"){e=r.getMinutes()%15===0}else if(o.timeType==="review"&&o.timeReviewUnit==="days"){e=r.getHours()%6===0&&r.getMinutes()===0}else if(o.timeType==="review"&&o.timeReviewUnit==="weeks"){e=r.getHours()===0&&r.getMinutes()===0}else if(o.timeType==="review"&&o.timeReviewUnit==="months"){e=r.getDay()===0&&r.getHours()===0&&r.getMinutes()===0}if(e){this.adapter.log.debug('Refresh History of state "'+s+'"...');const d=e=>this.broadcast("History",e,this.subscribedHistory[c].clients);this.getHistory({cb:d},c,s,o)}}});return this}}module.exports=JarvisServer;