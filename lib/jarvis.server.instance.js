const{WebSocketServer}=require("ws");const crypto=require("crypto");const ip=require("ip");const os=require("os");const url=require("node:url");const JarvisProxy=require("./jarvis.proxy");module.exports={getCookie(e){if(!e){return null}const t=e.split(";");const s=t.find(e=>e.trim().startsWith("connect.sid="));return s?s.replace("connect.sid=","").trim():null},startProxy(){const r=new JarvisProxy(this.adapter);r.init();r.on("connection",(e,t)=>{const s=this.connectClient(e,t);r.mapClient(t.remoteId,s.id);this.listenClient(s)});r.on("message",(e,t)=>{this.clients[e]&&this.clients[e]._class.message(t)});r.on("close",e=>{this.clients[e]&&this.clients[e]._class.disconnect()})},startServer(){this.server={ip:ip.address(),host:os.hostname()};this.adapter.log.debug("Connection: ioBroker host detected with "+this.server.host+" (IP: "+this.server.ip+").");const o={};const e=(e,r)=>{let i=decodeURI(e.url);i=!i.startsWith("/jarvis")?"/jarvis"+i:i;i=i==="/jarvis"||i==="/jarvis/"?"/jarvis/index.html":i;if(o[i]!==undefined){r.writeHead(200,{"Cache-Control":"public, max-age=30758400000","Content-Type":o[i].mimeType});r.end(o[i].buffer)}else{this.adapter.readFile("jarvis",i,(e,t,s)=>{if(e||!s){this.adapter.log.warn(i+": "+(e&&e.message||e||"No Mime Type"));r.writeHead(404);r.end(e&&e.message||e||"No Mime Type")}else{o[i]={buffer:t,mimeType:s};r.writeHead(200,{"Cache-Control":"public, max-age=30758400000","Content-Type":o[i].mimeType});r.end(o[i].buffer)}})}};if(this.options.socketSecure&&this.options.certificates!==null){const s={...this.options.certificates,allowHTTP1:true};server=require("http2").createSecureServer(s,e);this.adapter.log.debug("Connection: Using secure HTTPS-Server")}else{server=require("http").createServer(e);this.adapter.log.debug("Connection: Using non-secure HTTP-Server")}let t=this.adapter.config.hostWhitelist?this.adapter.config.hostWhitelist.replace(/, /g,",").split(","):[];t=t.concat(["localhost","127.0.0.1",this.server.ip,this.server.host]);this.adapter.log.debug("Connection: Using options: "+JSON.stringify(this.options.connection||{}));this.wss=null;try{this.wss=new WebSocketServer({server:server})}catch(e){this.adapter.log.error(e&&e.message||e)}this.wss.on("error",e=>{this.adapter.log.error("WebSocket Error: "+(e&&e.message)||e);this.adapter.log.debug(e)});this.wss.on("connection",(e,t)=>{e.id=t.headers["sec-websocket-key"]||crypto.randomUUID();const r={userAgent:null};if(t.url){const i=url.parse(decodeURI(t.url));i&&i.query&&i.query.split("&").forEach(e=>{const[t,s]=e.split("=");r[t]=s})}const s={userAgent:r.userAgent||t.headers["user-agent"],remoteAddress:t.connection.remoteAddress};try{const o=this.connectClient(e,s);o.cookie=this.getCookie(t.headers.cookie);this.listenClient(o)}catch(e){this.adapter.log.warn(e.message)}});server.listen(this.options.port,"0.0.0.0",()=>{this.adapter.log.info("Connection: WebSocket opened on port "+server.address().port+(this.options.certificates!==null?" using https":" using http")+"...")});return this}};