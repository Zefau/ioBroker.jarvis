const{WebSocketServer}=require("ws");const crypto=require("crypto");const fs=require("fs");const ip=require("ip");const os=require("os");const p=require("path");const url=require("node:url");const mimeTypes=require("./mimeTypes.json");const JarvisProxy=require("./jarvis.proxy");module.exports={getCookie(e){if(!e){return null}const t=e.split(";");const s=t.find(e=>e.trim().startsWith("connect.sid="));return s?s.replace("connect.sid=","").trim():null},startProxy(){const r=new JarvisProxy(this.adapter);r.init();r.on("connection",(e,t)=>{const s=this.connectClient(e,t);r.mapClient(t.remoteId,s.id);this.listenClient(s)});r.on("message",(e,t)=>{this.clients[e]&&this.clients[e]._class.message(t)});r.on("close",e=>{this.clients[e]&&this.clients[e]._class.disconnect()})},startServer(){this.server={ip:ip.address(),host:os.hostname()};this.adapter.log.debug("Connection: ioBroker host detected with "+this.server.host+" (IP: "+this.server.ip+").");const o={};const e=(e,r)=>{let n=decodeURI(e.url);if(e.url.indexOf("/jarvis-socket")!==-1){r.writeHead(301);r.end();return}n=!n.startsWith("/jarvis")&&!n.startsWith("/user")?"/jarvis"+n:n;n=n==="/jarvis"||n==="/jarvis/"?"/jarvis/index.html":n;if(o[n]!==undefined){r.writeHead(200,{"Cache-Control":"public, max-age=30758400000","Content-Type":o[n].mimeType});r.end(o[n].buffer)}else{const t=p.normalize(process.cwd()+"/www"+n);const s=t.substr(t.lastIndexOf("/")+1);const i=t.substr(t.lastIndexOf("."));fs.readFile(t,(e,t)=>{const s=mimeTypes[i]||null;if(e||!s){this.adapter.log.warn(n+": "+(e&&e.message||e||"No Mime Type"));r.writeHead(404);r.end(e&&e.message||e||"No Mime Type")}else{o[n]={buffer:t,mimeType:s};r.writeHead(200,{"Cache-Control":"public, max-age=30758400000","Content-Type":o[n].mimeType});r.end(o[n].buffer)}})}};if(this.options.socketSecure&&this.options.certificates!==null){const r={...this.options.certificates,allowHTTP1:true};server=require("http2").createSecureServer(r,e);this.adapter.log.debug("Connection: Using secure HTTPS-Server")}else{server=require("http").createServer(e);this.adapter.log.debug("Connection: Using non-secure HTTP-Server")}let t=this.adapter.config.hostWhitelist?this.adapter.config.hostWhitelist.replace(/, /g,",").split(","):[];t=t.concat(["localhost","127.0.0.1",this.server.ip,this.server.host]);this.adapter.log.debug("Connection: Using options: "+JSON.stringify(this.options.connection||{}));this.wss=null;try{this.wss=new WebSocketServer({server:server})}catch(e){this.adapter.log.error(e&&e.message||e)}this.wss.on("error",e=>{this.adapter.log.error("WebSocket Error: "+(e&&e.message)||e);this.adapter.log.debug(e)});this.wss.on("connection",(e,t)=>{const r={clientId:null,instanceId:null,userAgent:null};if(t.url){const n=url.parse(decodeURI(t.url));n&&n.query&&n.query.split("&").forEach(e=>{const[t,s]=e.split("=");r[t]=decodeURIComponent(s)})}e.id=r.instanceId||t.headers["sec-websocket-key"]||crypto.randomUUID();e.lastSeen=Date.now();const s={clientId:r.clientId,instanceId:r.instanceId,userAgent:r.userAgent||t.headers["user-agent"],remoteAddress:t.connection.remoteAddress};try{const i=this.connectClient(e,s);i.cookie=this.getCookie(t.headers.cookie);this.listenClient(i);e.on("pong",()=>{e.lastSeen=Date.now()})}catch(e){this.adapter.log.warn(e.message)}});server.listen(this.options.port,()=>{this.adapter.log.info("Connection: WebSocket opened on port "+server.address().port+(this.options.certificates!==null?" using https":" using http")+"...")});const s=setInterval(()=>{this.wss.clients.forEach(e=>{const t=Date.now()-60*1e3;if(e.lastSeen<t){return e.terminate()}e.ping()})},30*1e3);this.wss.on("close",()=>{this.adapter.log.debug("Connection: closed.")});return this}};