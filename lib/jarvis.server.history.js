const{hash:ohash}=require("ohash");module.exports={getHistory({cb:e},i,r,a={}){this.adapter.log.debug('Get History for "'+r+'"...');a.instance=a.instance||"history.0";Promise.allSettled([this.adapter.getForeignStateAsync("system.adapter."+a.instance+".alive"),this.adapter.getForeignStateAsync("system.adapter."+a.instance+".connected")]).then(s=>{const t=!s.some(s=>s.status!=="fulfilled"||(!s.value||s.value&&s.value.val!==true));if(!t){throw new Error(a.instance+" not reachable")}return t}).then(()=>{this.adapter.getHistory(r,{...a,start:a.start||Date.now()-a.review,end:a.end||Date.now()},(s,t)=>{if(!s&&t){this.subscribedHistory[i].history=t;this.subscribedHistory[i].hash=ohash(t);return e(this.subscribedHistory[i])}e({subscriptionKey:i,stateId:r,err:s,hash:null,history:null})})}).catch(s=>{e({subscriptionKey:i,stateId:r,err:s,hash:null,history:null})})},getHistoryDevices(e){this.adapter.log.debug('Refresh History Devices for "'+e+'"...');return new Promise(t=>{this.adapter.sendTo(e,"getEnabledDPs",{},s=>{Object.entries(s).forEach(([s,t])=>{this.cache.HistoryDevices.data[s]=this.cache.HistoryDevices.data[s]||{};this.cache.HistoryDevices.data[s][e]=t});t()})})},getHistoryInstances(){this.adapter.log.debug("Refresh History Instances...");this.cache.HistoryDevices=this.cache.HistoryDevices||{data:{},ts:0};const t=[];Object.keys(this.cache.AdapterInstances.data).forEach(s=>{if(this.isHistoryAdapter(s)){t.push(this.getHistoryDevices(s))}});return Promise.allSettled(t).then(()=>{this.cache.HistoryDevices.ts=Date.now();setTimeout(()=>this.getHistoryInstances(),15*60*1e3);return true})},isHistoryAdapter(s){const[t,e]=s.split(".");return["sql","history","influx"].includes(t)},subscribeHistory({cb:s,clientId:t},e,i,r){this.adapter.log.debug('Subscribe history of state "'+i+'" with key "'+e+'"...');if(!this.subscribedHistory[e]||!this.subscribedHistory[e].history){this.subscribedHistory[e]={subscriptionKey:e,stateId:i,options:{...r},clients:[t]};return this.getHistory({cb:s},e,i,{...r})}else if(!this.subscribedHistory[e].clients.includes(t)){this.subscribedHistory[e].clients.push(t)}s(this.subscribedHistory[e])},subscribeHistoryDevices({cb:s}){s(this.cache.HistoryDevices.data)},unsubscribe({cb:s,clientId:t},e,i,r){this.adapter.log.debug("Unsubscribe "+e+(r?' of state "'+r+'"':"")+' with key "'+i+'"...');if(e==="history"&&i&&this.subscribedHistory&&this.subscribedHistory[i]){this.subscribedHistory[i].clients=this.subscribedHistory[i].clients.filter(s=>s!==t);s({subscriptionKey:i,type:e,stateId:r,err:null})}else if(e==="state"&&r&&this.subscribedStates&&this.subscribedStates[r]){delete this.subscribedStates[r][t];s({subscriptionKey:i,type:e,stateId:r,err:null})}else{s({err:"Nothing to unsubscribe",type:e,subscriptionKey:i,stateId:r})}}};