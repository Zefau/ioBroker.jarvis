const{BindToClass,hash}=require("./helpers");const JarvisConverterV3=require("./jarvis.converter.v3");class JarvisConverter{constructor(e){this.adapter=e;this.LATEST_VERSIONS={devices:3.2,layout:3,widgets:3.1,scripts:3.2,css:3.2};BindToClass(JarvisConverterV3,this)}verify(){return!(this.adapter.config.versions===undefined||Object.keys(this.LATEST_VERSIONS).some(e=>this.LATEST_VERSIONS[e]!==this.adapter.config.versions[e]))}run(){if(this.verify()){return Promise.resolve()}const e=Object.keys(this.LATEST_VERSIONS).map(a=>new Promise((r,s)=>this.adapter.getState(a,(e,t)=>e?s(e):r({...t,key:a,_id:this.adapter.namespace+"."+a}))));return Promise.allSettled(e).then(e=>{const t=e.map(e=>{const t=e.value;let r=null;if(!t.val||t.val==="{}"){this.adapter.log.warn("No state value given for "+t.key+", thus default structure is set!");this.adapter.setState(t._id,JSON.stringify({version:this.LATEST_VERSIONS[t.key],signature:hash({}),[t.key]:{}}),true);return Promise.resolve({key:t.key,version:this.LATEST_VERSIONS[t.key]})}try{t.val=JSON.parse(t.val);r=t.val.version||2}catch(e){r=2}if((!this.adapter.config.versions||r!==this.LATEST_VERSIONS[t.key])&&this["v"+r.toString().replace(".","")+t.key]!==undefined){this.adapter.log.warn("Update and convert structure of "+t.key+"...");try{return this["v"+r.toString().replace(".","")+t.key](t.key,t)}catch(e){this.adapter.log.warn(e.message)}}return Promise.reject({key:t.key,version:r,update:false})});return Promise.allSettled(t).then(e=>{const t={};e.forEach(e=>{if(!e.reason||e.reason&&e.reason.update!==false){this.adapter.log.warn(e.status==="fulfilled"?"Updated and converted structure of "+e.value.key+" to v"+e.value.version+".":"Update and convert structure of "+e.reason.key+" FAILED!")}t[e.status==="fulfilled"?e.value.key:e.reason.key]=e.status==="fulfilled"?e.value.version:e.reason.version});return this.save(t)})})}save(a){this.adapter.log.debug("Update versions in configuration ("+JSON.stringify(a)+").");return new Promise((r,s)=>{this.adapter.getForeignObject("system.adapter."+this.adapter.namespace,(e,t)=>{if(e||!t||!t.native){return s("Error system.adapter."+this.adapter.namespace+" not found!")}t.native={...t.native,versions:a};this.adapter.setForeignObject(t._id,t,()=>r())})})}}module.exports=JarvisConverter;