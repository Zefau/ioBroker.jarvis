const{decrypt,encrypt,sign,verify}=require("./encryption");const semver=require("semver");module.exports={decrypt({cb:e},...t){e(decrypt(...t))},encrypt({cb:e},...t){e(encrypt(...t))},sign({cb:e},...t){e(sign(...t))},verify({cb:e},...t){e(verify(...t))},setAdapter({cb:r,clientId:e},s,i,t,n={}){n=n||{};s="system.adapter."+s;const a=this.clients[e];this.adapter.getForeignObject(s,(e,t)=>{if(e||!t){r({err:e});return}t.common.enabled=i;this.adapter.setForeignObject(s,t,{...n,user:n.user||a.userId||this.options.user},e=>{r({err:e})})})},setObject({cb:t,clientId:e},r,s,i={}){i=i||{};const n=this.clients[e];this.adapter.setForeignObject(r,s,{...i,user:i.user||n.userId||this.options.user},e=>{t({err:e})})},setScript({cb:e,clientId:t},r,s,i,n={}){n=n||{};const a=this.clients[t];this.setState({cb:e},"javascript.0.scriptEnabled."+r,s,i,{...n,user:n.user||a.userId||this.options.user},()=>{})},log({cb:e,clientId:t},r,s){s=Array.isArray(s)?s:[s];e({err:null});const i={debug:["debug","info","warn","error"],info:["info","warn","error"],warn:["warn","error"],error:["error"],off:[]};if(this.clients[t]){const n=this.clients[t];this.adapter.getState("clients.allBrowserConsoleInLog",(e,t)=>{if(!e&&t&&t.val==="off"){this.adapter.getState("clients."+n.ns+".browserConsoleInLog",(e,t)=>{if(!e&&t&&t.val&&i[t.val]&&i[t.val].includes(r)){this.adapter.log[r](n.ip+" ("+n.userBrowser+") - "+s.join(", "))}})}else if(!e&&t&&t.val&&i[t.val]&&i[t.val].includes(r)){this.adapter.log[r](n.ip+" ("+n.userBrowser+") - "+s.join(", "))}})}},setState({cb:t,clientId:e},r,s,i,n={}){n=n||{};if(s&&(s._jarvis||["widgets"].some(e=>r==="jarvis."+this.adapter.instance+"."+e))){const o=s._jarvis;s=s.val;if(o&&semver.lt(o,this.adapter.version)){const c="Version of jarvis does not match for setting state "+r+" ("+this.adapter.version+" vs. "+o+")!";this.adapter.log.warn(c);t({err:c});return}}const a=this.clients[e];this.adapter.setForeignState(r,s,i||false,{...n,user:n.user||a.userId||this.options.user},e=>{t({err:e,stateId:r,value:s,ack:i})})}};