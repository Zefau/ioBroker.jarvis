const crypto=require("crypto");const https=require("https");const JarvisClient=require("./jarvis.client.js");const{ucFirst}=require("./helpers.js");module.exports={announceClients(){this.adapter.log.info("Server has "+Object.values(this.clients).length+" connected clients.");this.emit("CLIENT_LIST",Object.values(this.clients).map(e=>{e={...e};delete e._class;return e}))},authenticate({cb:t,clientId:e},i=""){const s=this.options["authentication"+ucFirst(i||"")];const n=this.clients[e];this.authenticateClient(n,i).then(()=>{t({authenticationMethod:s,instance:this.adapter.instance,authenticated:true})}).catch(e=>{t({err:e,authenticationMethod:s,instance:this.adapter.instance,authenticated:false})})},authenticateClient(s,n=""){this.adapter.log.debug('Authenticate client "'+s.id+'"'+(n?' for "'+n+'"':"")+"...");n="authentication"+ucFirst(n||"");const e=this.options[n];const t=this.clientsAuthenticated[s.id+(n?"-"+n:"")];if(!this.options.socketSecure||e==="none"){this.adapter.log.debug("No authentication required"+(n?' for "'+n+'"':"")+".");s.isAuthenticated=true;return Promise.resolve()}else if(e==="password"){if(t!==this.options[n+"Password"]){return Promise.reject(new Error("Authentication failed! User not logged-in"+(n?' for "'+n+'"':"")+"!"))}this.adapter.log.debug('Authenticated client "'+s.id+'"'+(n?' for "'+n+'"':"")+" via password.");s.isAuthenticated=true;return Promise.resolve()}else if(e==="group"){s.userName=t;if(!s.userName&&!s.userId&&!this.options.webPort){return Promise.reject(new Error("Authentication failed! User not logged-in"+(n?' for "'+n+'"':"")+"!"))}let e=Promise.resolve();if(!s.userName&&!s.userId&&this.options.webPort){e=new Promise(t=>{const i=setTimeout(()=>t(),3*1e3);this.adapter.sendTo("web.0","getUserByCookie",{cookie:s.cookie},e=>{clearTimeout(i);if(!e.error&&e.user){this.adapter.log.debug('Authenticated client "'+s.id+'"'+(n?' for "'+n+'"':"")+' via user id "'+e.user+'" using the web-adapter.');s.userId="system.user."+e.user}t()})})}return e.then(()=>this.getUsers(true)).then(e=>{const t=e.find(e=>e.id===s.userName||e.value._id===s.userId);if(!t||t.value.common.enabled!==true){this.adapter.log.debug("Authentication failed! User not valid"+(n?' for "'+n+'"':"")+"!");throw new Error("Authentication failed! User not valid"+(n?' for "'+n+'"':"")+"!")}this.adapter.log.debug('Verify authorizations for user "'+t.id+'"...');const i=t.value.groups;if(this.options[n+"Group"]&&Array.isArray(this.options[n+"Group"])&&this.options[n+"Group"].length>0&&!i.some(e=>this.options[n+"Group"].includes(e.value._id))){this.adapter.log.debug("Authentication failed! User not authorized"+(n?' for "'+n+'"':"")+"!");throw new Error("Authentication failed! User not authorized"+(n?' for "'+n+'"':"")+"!")}else if((!this.options[n+"Group"]||!Array.isArray(this.options[n+"Group"])||this.options[n+"Group"].length===0)&&userGroup.value._id!=="system.group.administrator"){this.adapter.log.debug("Authentication failed! Invalid adapter configuration for groups"+(n?' for "'+n+'"':"")+"!");throw new Error("Authentication failed! Invalid adapter configuration for groups"+(n?' for "'+n+'"':"")+"!")}s.isAuthenticated=true;s.userId=t.value._id;s.userName=t.id;this.adapter.log.debug('Authenticated client "'+s.id+'"'+(n?' for "'+n+'"':"")+' via username "'+s.userName+'".');return true})}return Promise.reject(new Error("Authentication failed! Invalid adapter configuration"+(n?' for "'+n+'"':"")+"!"))},connectClient(e,t){const i=JarvisClient.getClientInformation(t);i._class=this.clients[i.id]&&this.clients[i.id]._class||null;if(!i._class){this.adapter.log.debug('Client with ip "'+t.remoteAddress+'" and client-id "'+i.id+'" newly connecting...');i._class=new JarvisClient(this.adapter,i);i._class.on("disconnected",()=>this.disconnectClient(i));this.clients[i.id]=i;this.announceClients();this.emit("CLIENT_NEW",{...i,_class:undefined})}const s=i.id;const n=e.id;i._class.addInstance(n,e);this.send({clientId:s,instanceId:n},"#time",Date.now());this.send({clientId:s,instanceId:n},"#version",this.adapter.version);this.send({clientId:s,instanceId:n},"#instance",this.adapter.instance);this.send({clientId:s,instanceId:n},"#client",{...i,instanceId:n,_class:undefined});this.updateClient(this.clients[i.id]);return i},getAuthenticatedClients(){this.adapter.log.debug("Get authenticated clients...");return new Promise((i,s)=>{this.adapter.setObjectNotExists("clients.authenticated",{type:"state",common:{role:"json",type:"string",write:true},native:{}},()=>{this.adapter.getState("clients.authenticated",(e,t)=>{if(!e){try{this.clientsAuthenticated=JSON.parse(t&&t.val||"{}");this.adapter.log.debug("Got authenticated clients.");i()}catch(e){s(e)}}else{s(e)}})})})},persistAuthenticatedClients(){this.adapter.log.debug("Persist authenticated clients...");return new Promise((t,i)=>{this.adapter.setObjectNotExists("clients.authenticated",{type:"state",common:{role:"json",type:"string",write:true},native:{}},()=>{this.adapter.setState("clients.authenticated",JSON.stringify(this.clientsAuthenticated,null,3),true,e=>{if(e){return i(e)}this.adapter.log.debug("Persisted authenticated clients.");t()})})})},logout({cb:e,clientId:t}){this.logoutClient({cb:e,clientId:t})},logoutClient({cb:e,clientId:t}){this.adapter.log.debug('Logout client "'+t+'".');this.clients[t].isAuthenticated=false;this.clients[t].userId=null;this.clients[t].userName=null;delete this.clientsAuthenticated[t+"-authentication"];delete this.clientsAuthenticated[t+"-authenticationConfiguration"];this.persistAuthenticatedClients().catch(e=>e&&this.adapter.log.warn("Persisting authenticated clients failed: "+e.message));e({err:null})},disconnectClient(e){this.clients[e.id]&&this.updateClient(this.clients[e.id],{connected:false}).then(()=>{this.clients[e.id]&&this.clients[e.id]._class.removeAllListeners();delete this.clients[e.id];this.announceClients()})},listenClient(i){if(!i._class._listener){this.adapter.log.debug('Listening for messages from client with ip "'+i.ip+'" and client-id "'+i.id+'"...');i._class._listener=true;i._class.on("message",(e,t)=>{t=t.toString();this.handleClientEvent({clientId:i.id,instanceId:e},t)})}},ping({clientId:e,instanceId:t}){if(this.clients[e]){this.adapter.log.silly("Received ping from "+this.clients[e].ip+" ("+t+").");this.updateClient(this.clients[e]);if(this.clients[e]._class.instances[t]){this.clients[e]._class.instances[t].alive&&clearTimeout(this.clients[e]._class.instances[t].alive);this.clients[e]._class.instances[t].alive=setTimeout(()=>this.clients[e]&&this.clients[e]._class.disconnect(t,"Client-Connection timeout"),3*60*1e3)}}},updateClient(c,e={}){e.connected=e.connected!==undefined?e.connected:true;const l={connected:{name:"Indicates client connection",role:"indicator.connected",type:"boolean",value:e.connected},ip:{name:"Client IP",role:"info.ip",type:"string",value:c.ip},id:{name:"Client ID",role:"text",type:"string",value:c.id},id:{name:"Client ID",role:"text",type:"string",value:c.id},lastActivity:{name:"Last User Activity",role:"date",type:"number",value:c.lastActivity},userPlatform:{name:"Client Platform Information",role:"text",type:"json",value:c.userPlatform},userBrowser:{name:"Client Browser",role:"text",type:"string",value:c.userBrowser},lastSeen:{name:"Client Last Seen",role:"value.time",type:"number",value:Date.now()}};return new Promise(t=>{this.adapter.setObjectNotExists("clients."+c.ns,{type:"device",common:{name:c.id},native:{}},()=>{const e=Object.keys(l).map(o=>{return new Promise(i=>{const s="clients."+c.ns+"."+o;const{role:e,type:t,value:n,initial:r,subscribe:a}=l[o];this.adapter.setObjectNotExists(s,{type:"state",common:{role:e,type:t,write:false},native:{}},(e,t)=>{if(t&&r||n!==undefined){this.adapter.setState(s,typeof n==="object"?JSON.stringify(n,null,3):n,true)}i()})})});e.push(new Promise(e=>{const t="clients."+c.ns+".setTabId";this.adapter.setObjectNotExists(t,{type:"state",common:{role:"text",type:"string",write:true},native:{}},()=>e())}));e.push(new Promise(e=>{const t="clients."+c.ns+".browserConsoleInLog";this.adapter.setObjectNotExists(t,{type:"state",common:{role:"info",type:"string",write:true,def:"off",states:{off:"off",debug:"debug",info:"info",warn:"warn",error:"error"}},native:{}},()=>e())}));e.push(new Promise(e=>{const t="clients.allBrowserConsoleInLog";this.adapter.setObjectNotExists(t,{type:"state",common:{role:"info",type:"string",write:true,def:"off",states:{off:"off",debug:"debug",info:"info",warn:"warn",error:"error"}},native:{}},()=>e())}));Promise.allSettled(e).then(t)})})},removeOutdatedClients(){this.adapter.getDevices((e,t)=>{t.forEach(n=>{this.adapter.getState(n._id+".lastSeen",(e,t)=>{const i=n._id.substr(n._id.lastIndexOf(".")+1);const s=Date.now()-7*24*3600*1e3;if(e&&e.message){this.adapter.log.warn("Error removing old devices: "+e.message)}if(!t||!t.val||t.val<s){this.adapter.log.info("Device "+i+" expired and removed.");this.adapter.delForeignObject(n._id,{recursive:true},()=>{})}})})})},handleClientEvent(e,t){try{const i=JSON.parse(t);if(i&&i.event==="message"){const{messageId:s,index:n,length:r,chunk:a}=i;this.clientsMessages[s]=this.clientsMessages[s]||{};this.clientsMessages[s][n]=a;if(Object.keys(this.clientsMessages[s]).length===r){this.emit("message",e,Object.values(this.clientsMessages[s]).join(""));delete this.clientsMessages[s]}}}catch(e){this.adapter.log.warn("Warning listening for messages from client: "+e.message+". See debug-log for more details.");this.adapter.log.debug("Event: "+t)}},handleClientMessage(s){try{const n=JSON.parse(s);let{messageId:e,command:t,params:i=[]}=n;i=Array.isArray(i)?i:[i];return{command:t,messageId:e,params:i}}catch(e){this.adapter.log.warn("Warning handling message: "+e.message+" (see debug-log for details)");this.adapter.log.debug("Message: "+s)}return null},handleClientCommand(t,i,s,e){if(i&&this[i]){const n=this.clients[t.clientId];if(n.isAuthenticated===true||["ping","authenticate","logout","verifyLogin"].includes(i)){cb=e=>this.send(t,i,e,s);this[i]({cb:cb,command:i,...t,messageId:s},...e)}else{this.send(t,i,{err:new Error("Client is not authenticated!")},s)}}else{this.adapter.log.warn("Unknown command: "+i+" (from client "+t.clientId+" / "+t.instanceId+").")}},broadcast(e,t,i=this.clients){i=Array.isArray(i)?i:Object.keys(i);for(const s of i){this.send(s,e,t)}},send(s,n,t={},r=crypto.randomUUID(),a="message"){if(typeof s!=="object"){s={clientId:s}}if(t.err&&t.err!=="_isNull"&&t.err.name!=="_isNull"){t.err={name:t.err.name||t.err,message:t.err.message,stack:t.err.stack}}else if(t.err===null){t.err="_isNull"}const o=this.clients[s.clientId];if(o){const e=JSON.stringify(t).match(/.{1,100000}/g);const c=e.length;try{e.forEach((e,t)=>{const i={event:a,...s,messageId:r,action:n,index:t,length:c,chunk:e};o._class.send(i,s)})}catch(e){this.adapter.log.warn("Error sending message to client with ip "+o.ip+' (action "'+n+'"): '+e.message);this.adapter.log.debug("Error sending message with data: "+JSON.stringify(t))}}},verifyLogin({cb:n,clientId:r},e,a,t,o=""){o="authentication"+ucFirst(o||"");if(e==="password"){if(t!==this.options[o+"Password"]){return n({err:new Error("Authentication failed! Password incorrect!")})}this.clientsAuthenticated[r+(o?"-"+o:"")]=this.options[o+"Password"];this.persistAuthenticatedClients().catch(e=>e&&this.adapter.log.warn("Persisting authenticated clients failed: "+e.message));this.adapter.log.debug("Client authenticated using password.");return n({login:true})}else if(e==="group"){if(!a||!t){return n({err:new Error("Authentication failed! Username or password incorrect!")})}this.adapter.checkPassword(a,t,e=>{if(e){this.getUsers(true).then(e=>{const t=e.find(e=>e.id===a);if(!t||t.value.common.enabled!==true){return n({err:new Error("Authentication failed! User not valid!")})}const i=!this.options[o+"Group"]||Array.isArray(this.options[o+"Group"])?this.options[o+"Group"]:this.options[o+"Group"].split(",");const s=t.value.groups;if(i&&Array.isArray(i)&&i.length>0&&!s.some(e=>i.includes(e.value._id))){return n({err:new Error("Authentication failed! User not authorized!")})}else if((!i||!Array.isArray(i)||i.length===0)&&userGroup.value._id!=="system.group.administrator"){return n({err:new Error("Authentication failed! Invalid adapter configuration for groups!")})}this.clientsAuthenticated[r+(o?"-"+o:"")]=a;this.persistAuthenticatedClients().catch(e=>e&&this.adapter.log.warn("Persisting authenticated clients failed: "+e.message));this.adapter.log.debug('Client authenticated using username "'+a+'" and password.');return n({login:true})})}else{return n({err:new Error("Authentication failed! Username or password incorrect!")})}})}else{n({err:new Error("Incorrect authentication method!")})}}};